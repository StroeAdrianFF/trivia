{"version":3,"sources":["Quiz.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Quiz","props","useState","question","setQuestion","category","setCategory","correctAns","setCorrectAns","ans","setAns","options","setOptions","value","setValue","url","useEffect","a","fetch","quiz","json","res","results","replace","correct_answer","setCounter","counter","incorrect","incorrect_answers","correct","concat","i","length","j","Math","floor","random","shuffle","fetcher","e","console","log","className","type","onChange","target","Button","variant","color","onClick","randomizer","alert","window","location","reload","Counter","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+TAuFeA,MAnFf,SAAcC,GAAQ,IAAD,EAEeC,mBAAS,IAFxB,mBAEVC,EAFU,KAEAC,EAFA,OAGeF,mBAAS,IAHxB,mBAGVG,EAHU,KAGAC,EAHA,OAImBJ,mBAAS,IAJ5B,mBAIVK,EAJU,KAIEC,EAJF,OAKKN,mBAAS,IALd,mBAKVO,EALU,KAKLC,EALK,OAMaR,mBAAS,IANtB,mBAMVS,EANU,KAMDC,EANC,OAOSV,mBAAS,IAPlB,mBAOVW,EAPU,KAOHC,EAPG,KAWbC,EAAM,qDAmDV,OAlDAC,qBAAU,WACN,KAAI,uCACA,oCAAAC,EAAA,sEACuBC,MAAMH,GAD7B,cACUI,EADV,gBAEsBA,EAAKC,OAF3B,OAEUC,EAFV,OAGIf,EAAYe,EAAIC,QAAQ,GAAGjB,SAASkB,QAAQ,IAAK,QACjDnB,EAAYiB,EAAIC,QAAQ,GAAGnB,SAASoB,QAAQ,UAAW,MAAMA,QAAQ,UAAW,MAChFf,EAAca,EAAIC,QAAQ,GAAGE,gBAC7BvB,EAAMwB,WAAWxB,EAAMyB,SAEjBC,EAAYN,EAAIC,QAAQ,GAAGM,kBAC3BC,EAAUR,EAAIC,QAAQ,GAAGE,eACzBM,EAASH,EAAUG,OAAOD,GAEhB,SAACZ,GACb,IAAK,IAAIc,EAAId,EAAEe,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADP,EAEpB,CAACd,EAAEgB,GAAIhB,EAAEc,IAAvBd,EAAEc,GAFgC,KAE5Bd,EAAEgB,GAF0B,KAKvC,OADArB,EAAWK,GACJA,EAEXoB,CAAQP,GApBZ,4CADA,qDAuBAQ,CAAQvB,GAEZ,MAAOwB,GACHC,QAAQC,IAAIF,MAEjB,CAACxB,EAAKd,IAsBL,yBAAKyC,UAAU,YACX,yBAAKA,UAAU,QAAf,eACiBrC,EAAUE,EAAW,6BAAM,6BAD5C,eAEiBJ,EAFjB,IAE2B,6BAAM,6BAC7B,wBAAIuC,UAAU,WACV,kCAAQ/B,EAAQ,IAChB,mCAASA,EAAQ,IACjB,oCAAUA,EAAQ,IAClB,mCAASA,EAAQ,KAPzB,gBASa,2BAAOgC,KAAK,OAAO9B,MAAOA,EAAO+B,SA7BxC,SAACL,GACX7B,EAAO6B,EAAEM,OAAOhC,OAChBC,EAASyB,EAAEM,OAAOhC,UAkBd,IASkE,6BATlE,IASyE,6BACrE,kBAACiC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAzB3C,WACX,IAAIC,EAAahB,KAAKC,MAAsB,GAAhBD,KAAKE,UAC7B3B,IAAQF,GACRN,EAAMwB,WAAWxB,EAAMyB,QAAU,GACjCX,EAAG,6CAAyCmC,EAAzC,oBAEHjD,EAAMwB,WAA2B,EAAhBxB,EAAMyB,SACvByB,MAAM,0CACNC,OAAOC,SAASC,QAAO,IAE3BxC,EAAS,KAe8D4B,UAAU,OAAzE,c,MClEDa,MATf,SAAiBtD,GACb,OACI,yBAAKyC,UAAU,eAAf,aAEI,yBAAKA,UAAU,SAASzC,EAAMyB,WCW3B8B,MAZf,WAAgB,IAAD,EACiBtD,mBAAS,GAD1B,mBACNwB,EADM,KACGD,EADH,KAGb,OACE,yBAAKiB,UAAU,OACb,kBAAC,EAAD,CAAMhB,QAASA,EAASD,WAAYA,IACpC,kBAAC,EAAD,CAASC,QAASA,MCAJ+B,QACW,cAA7BL,OAAOC,SAASK,UAEe,UAA7BN,OAAOC,SAASK,UAEhBN,OAAOC,SAASK,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.7cc24872.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport './Quiz.css';\r\nimport { Button } from '@material-ui/core';\r\n\r\nfunction Quiz(props) {\r\n\r\n    const [question, setQuestion] = useState('')\r\n    const [category, setCategory] = useState('')\r\n    const [correctAns, setCorrectAns] = useState('')\r\n    const [ans, setAns] = useState('')\r\n    const [options, setOptions] = useState([])\r\n    const [value, setValue] = useState('')\r\n\r\n\r\n\r\n    let url = 'https://opentdb.com/api.php?amount=1&type=multiple'\r\n    useEffect(() => {\r\n        try {\r\n            async function fetcher() {\r\n                const quiz = await fetch(url)\r\n                const res = await quiz.json();\r\n                setCategory(res.results[0].category.replace(\":\", \" ->\"));\r\n                setQuestion(res.results[0].question.replace(/&quot;/g, \"''\").replace(/&#039;/g, \"'\"));\r\n                setCorrectAns(res.results[0].correct_answer);\r\n                props.setCounter(props.counter)\r\n\r\n                const incorrect = res.results[0].incorrect_answers\r\n                const correct = res.results[0].correct_answer\r\n                const concat = incorrect.concat(correct)\r\n\r\n                const shuffle = (a) => {\r\n                    for (let i = a.length - 1; i > 0; i--) {\r\n                        const j = Math.floor(Math.random() * (i + 1));\r\n                        [a[i], a[j]] = [a[j], a[i]];\r\n                    }\r\n                    setOptions(a)\r\n                    return a;\r\n                }\r\n                shuffle(concat);\r\n            }\r\n            fetcher(url);\r\n        }\r\n        catch (e) {\r\n            console.log(e)\r\n        }\r\n    }, [url, props])\r\n\r\n\r\n    const input = (e) => {\r\n        setAns(e.target.value)\r\n        setValue(e.target.value)\r\n    }\r\n\r\n    const verify = () => {\r\n        let randomizer = Math.floor(Math.random() * 49)\r\n        if (ans === correctAns) {\r\n            props.setCounter(props.counter + 1)\r\n            url = `https://opentdb.com/api.php?amount=${randomizer}&type=multiple`\r\n        } else {\r\n            props.setCounter(props.counter * 0);\r\n            alert('You lost! All your points are now gone')\r\n            window.location.reload(false)\r\n        }\r\n        setValue('')\r\n    }\r\n\r\n    return (\r\n        <div className=\"mainCard\">\r\n            <div className=\"card\">\r\n                Category -> {category}{correctAns}<br /><br />\r\n                Question -> {question} <br /><br />\r\n                <ul className=\"answers\">\r\n                    <li>I. {options[0]}</li>\r\n                    <li>II. {options[1]}</li>\r\n                    <li>III. {options[2]}</li>\r\n                    <li>IV. {options[3]}</li>\r\n                </ul>\r\n            Your answer: <input type=\"text\" value={value} onChange={input} /> <br /> <br />\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={verify} className=\"btn\">\r\n                    Answer!\r\n            </Button>\r\n            </div >\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Quiz\r\n","import React from 'react';\r\nimport './Counter.css';\r\n\r\nfunction Counter(props) {\r\n    return (\r\n        <div className=\"mainCounter\">\r\n            Your score\r\n            <div className=\"score\">{props.counter}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport Quiz from './Quiz';\nimport Counter from './Counter';\n\n\nfunction App() {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div className=\"App\">\n      <Quiz counter={counter} setCounter={setCounter} />\n      <Counter counter={counter} />\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}